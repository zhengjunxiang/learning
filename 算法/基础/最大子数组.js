// 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

// 子数组 是数组中的一个连续部分。

//  

// 示例 1：

// 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
// 输出：6
// 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
// 示例 2：

// 输入：nums = [1]
// 输出：1
// 示例 3：

// 输入：nums = [5,4,-1,7,8]
// 输出：23

var maxSubArray = function(nums) {
    let max=nums[0]   // 最大值
    let newMax=nums[0]   // 缓存最大值

    for(let i=1;i<nums.length;i++){
        newMax=Math.max(nums[i],newMax+nums[i])
        max=Math.max(newMax,max)
    }

    return max
};


// 思路：先假设第一个数字为最大的值，然后依次的对比后一项与当前这项的和哪个大，如果后一项与其只和变小了就放弃当前这个值，将最大值设置为更大的后一项，依次类推
//  因为每次保存的是一个最大的max 

